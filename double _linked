class Node:
    def __init__(self, n):
        self.data = n
        self.next = None
        self.prev = None

class dll:
    def __init__(self):
        self.head = None
        self.tail = None
    
    def addback(self, x):
        new_node = Node(x)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
    
    def addfront(self, x):
        new_node = Node(x)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
    
    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end="->")
            current = current.next
        print()
    
    def rev_display(self):
        current = self.tail
        while current is not None:
            print(current.data, end="->")
            current = current.prev
        print()
    
    def search(self, x):
        t = self.head
        a = self.tail
        while t != a and t != a.next:
            if t.data == x or a.data == x:
                return 1
            t = t.next
            a = a.prev
        if t.data == x:
            return 1
        else:
            return 0
    
    def lengthl(self):
        t = self.head
        a = self.tail
        length = 0
        while t != a and t != a.next:
            length += 1
            t = t.next
            a = a.prev
        return length * 2 + 1 if t == a else length * 2
    
    def palin(self):
        t = self.head
        a = self.tail
        while t != a and t != a.next:
            if t.data != a.data:
                print('not palindrome')
                return 
            t = t.next
            a = a.prev
        print('yes it is palindrome')
    
    def rotatel(self):
        if not self.head or not self.head.next:
            return
        slow = fast = self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        current = self.head
        while current != slow:
            current.data, slow.data = slow.data, current.data
            current = current.next
            slow = slow.next
    
    def reverse(self):
        current = self.head
        prev = None
        while current is not None:
            next_n = current.next
            current.next = prev
            current.prev = next_n
            prev = current
            current = next_n
        self.tail = self.head
        self.head = prev
l = dll()
l.addback(9)
l.addback(10)
l.addback(11)
l.addback(12)
l.addfront(5)
l.addfront(4)
l.display()
l.reverse()
l.display()
